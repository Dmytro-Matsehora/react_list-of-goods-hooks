{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","good1","good2","ALPABET","localeCompare","LENGTH","length","reverse","App","useState","NONE","sorter","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAY,YAAOH,GAmBzB,OAjBAG,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQL,GACN,KAAKJ,EAASU,QACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKT,EAASY,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITR,GACFC,EAAaQ,UAGRR,G,SAlCJN,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAyCE,IAAMe,EAAuB,WAClC,MAA2BC,mBAAShB,EAASiB,MAA7C,mBAAOb,EAAP,KAAiBc,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOX,EAAP,KAAmBS,EAAnB,KAOA,OACE,sBAAKK,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEf,IAAaJ,EAASU,QAClB,0BACA,iBAENW,QAAS,kBAAMH,EAAOlB,EAASU,UAPjC,iCAYA,wBACEU,KAAK,SACLD,UACEf,IAAaJ,EAASY,OAClB,6BACA,oBAENS,QAAS,kBAAMH,EAAOlB,EAASY,SAPjC,4BAYA,wBACEQ,KAAK,SACLD,WACiB,IAAfd,EACI,6BACA,oBAENgB,QAAS,kBAAMP,GAAuB,IAAfT,IAPzB,sBAYED,IAAaJ,EAASiB,OAAuB,IAAfZ,IAE5B,wBACEe,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAhDnBH,EAAOlB,EAASiB,WAChBH,GAAQ,IA4CA,sBAUN,6BACE,6BACGZ,EAAkBD,EAAiB,CAAEI,aAAYD,aAC/CkB,KAAI,SAAAC,GAAI,OAAI,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cCtHjDC,IAASC,OACP,cAAC,EAAD,CAAKtB,MAAOF,IACZyB,SAASC,eAAe,W","file":"static/js/main.d216fb91.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype Props = {\n  goods: string[]\n};\n\nexport const App: React.FC<Props> = () => {\n  const [sortType, sorter] = useState(SortType.NONE);\n  const [isReversed, reverse] = useState(false);\n\n  const reset = () => {\n    sorter(SortType.NONE);\n    reverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            sortType !== SortType.ALPABET\n              ? 'button is-info is-light'\n              : 'button is-info'\n          }\n          onClick={() => sorter(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            sortType !== SortType.LENGTH\n              ? 'button is-success is-light'\n              : 'button is-success'\n          }\n          onClick={() => sorter(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            isReversed !== true\n              ? 'button is-warning is-light'\n              : 'button is-warning'\n          }\n          onClick={() => reverse(isReversed !== true)}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed === true)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => reset()}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {getReorderedGoods(goodsFromServer, { isReversed, sortType })\n            .map(good => <li data-cy=\"Good\" key={good}>{good}</li>)}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App, goodsFromServer } from './App';\n\nReactDOM.render(\n  <App goods={goodsFromServer} />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}